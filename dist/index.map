{"version":3,"sources":["lib/server.js","index.js"],"names":["Server","require","http","PORT","SERVER_NAME","clients","httpServer","createServer","req","res","forEach","socket","write","url","end","s","conn","isFirst","connName","log","str","args","console","on","d","filter","c","push","listen","argv","process","port","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,SAASC,QAAQ,KAAR,EAAeD,MAA9B;AACA,MAAME,OAAOD,QAAQ,MAAR,CAAb;AACA,MAAME,OAAO,aAAoB,KAAjC;AACA,MAAMC,cAAc,aAAqB,QAAzC;;AAEA,IAAIC,UAAU,EAAd;;AAEA,MAAMC,aAAaJ,KAAKK,YAAL,CAAkB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;;AAEvDJ,UAAQK,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChCA,WAAOC,KAAP,CAAaJ,IAAIK,GAAjB;AACD,GAFD;;AAIAJ,MAAIK,GAAJ;AACD,CAPkB,CAAnB;;AASA,MAAMC,IAAI,IAAIf,MAAJ,CAAW,UAAUgB,IAAV,EAAgB;AACnC,MAAIC,UAAU,IAAd;AACA,MAAIC,WAAW,EAAf;;AAEA,MAAIC,MAAM,CAACC,GAAD,EAAM,GAAGC,IAAT,KAAkBC,QAAQH,GAAR,CAAY,GAAG,CAAE,IAAGD,QAAS,KAAIE,GAAI,EAAtB,EAAyB,GAAGC,IAA5B,CAAf,CAA5B;;AAEAL,OAAKO,EAAL,CAAQ,KAAR,EAAe,YAAY;AACzBJ,QAAK,4BAAL;AACD,GAFD;;AAIAH,OAAKO,EAAL,CAAQ,MAAR,EAAgB,UAAUC,CAAV,EAAa;AAC3B,QAAIP,OAAJ,EAAa;AACXC,iBAAWM,CAAX;AACAP,gBAAU,KAAV;AACD;AACDE,QAAK,cAAL;AACD,GAND;;AAQAH,OAAKO,EAAL,CAAQ,KAAR,EAAe,YAAY;AACzBJ,QAAK,YAAL;AACAd,cAAUA,QAAQoB,MAAR,CAAeC,KAAKA,MAAMV,IAA1B,CAAV;AACD,GAHD;;AAKAA,OAAKJ,KAAL,CAAWR,WAAX;;AAEAC,UAAQsB,IAAR,CAAaX,IAAb;AACD,CA1BS,CAAV;;AA4BAD,EAAEa,MAAF,CAASzB,IAAT,EAAe,YAAY;AACzBmB,UAAQH,GAAR,CAAa,oBAAmBhB,IAAK,EAArC;AACD,CAFD;;AAIAG,WAAWsB,MAAX,CAAkBzB,OAAK,CAAvB,EAA0B,YAAY;AACpCmB,UAAQH,GAAR,CAAa,kBAAiBhB,OAAK,CAAE,EAArC;AACD,CAFD;;AChDA;;AAEA,IAAI0B,OAAOC,QAAQD,IAAnB;;AAEA,IAAIE,OAAO,CAACF,KAAK,CAAL,CAAZ;AACA,IAAIG,OAAO,CAACH,KAAK,CAAL,CAAZ;;AAEA,IAAIE,IAAJ,EAAU;AACR,cAAmBA,IAAnB;AACD;AACD,IAAIC,IAAJ,EAAU;AACR,cAAmBA,IAAnB;AACD;;AAED/B,QAAQ,cAAR","file":"index.map","sourceRoot":"..","sourcesContent":["const Server = require('net').Server;\nconst http = require('http');\nconst PORT = process.env.PORT || 10001;\nconst SERVER_NAME = process.env.SNAME || 'server';\n\nvar clients = [];\n\nconst httpServer = http.createServer(function (req, res) {\n\n  clients.forEach(function (socket) {\n    socket.write(req.url);\n  })\n\n  res.end();\n});\n\nconst s = new Server(function (conn) {\n  var isFirst = true;\n  var connName = '';\n\n  var log = (str, ...args) => console.log(...[`\"${connName}\" ${str}`, ...args]);\n\n  conn.on('end', function () {\n    log(`connection is disconnected`);\n  });\n\n  conn.on('data', function (d) {\n    if (isFirst) {\n      connName = d;\n      isFirst = false;\n    }\n    log(`is connected`);\n  });\n\n  conn.on('end', function () {\n    log(`server end`);\n    clients = clients.filter(c => c !== conn);\n  });\n\n  conn.write(SERVER_NAME);\n\n  clients.push(conn);\n});\n\ns.listen(PORT, function () {\n  console.log(`socket listen on:${PORT}`);\n});\n\nhttpServer.listen(PORT-1, function () {\n  console.log(`http listen on:${PORT-1}`);\n});\n","#!/usr/bin/env node\n\nvar argv = process.argv\n\nvar port = +argv[2]\nvar name = +argv[3]\n\nif (port) {\n  process.env.PORT = port;\n}\nif (name) {\n  process.env.NAME = name;\n}\n\nrequire('./lib/server');\n"]}